{"ast":null,"code":"import React__default, { createElement } from 'react';\nconst Row = props => {\n  const {\n    label,\n    children,\n    index,\n    colorRange\n  } = props;\n  return React__default.createElement(\"div\", {\n    className: `row row--${index}`\n  }, React__default.createElement(\"div\", {\n    className: 'row__label'\n  }, label), React__default.createElement(\"div\", {\n    className: 'row__data'\n  }, children), React__default.createElement(\"div\", null, \"asdasdasdasdasdasdasdasd\"), React__default.createElement(\"div\", null, colorRange.map(color => React__default.createElement(\"div\", {\n    className: 'range',\n    key: color,\n    style: {\n      backgroundColor: color\n    }\n  }))));\n};\nconst Cell = props => {\n  const {\n    item1,\n    item2\n  } = props;\n  return React__default.createElement(\"div\", {\n    className: 'cell'\n  }, React__default.createElement(\"div\", {\n    className: 'cell__data'\n  }, React__default.createElement(\"div\", {\n    className: 'cell__item'\n  }, React__default.createElement(\"span\", {\n    className: 'cell__item--label'\n  }, item1.label), React__default.createElement(\"span\", {\n    className: 'cell__item--value'\n  }, item1.value)), React__default.createElement(\"div\", {\n    className: 'cell__item'\n  }, React__default.createElement(\"span\", {\n    className: 'cell__item--label'\n  }, item2.label), React__default.createElement(\"span\", {\n    className: 'cell__item--value'\n  }, item2.value))));\n};\nconst DuoHeatmap = props => {\n  const {\n    modifier,\n    rows,\n    color1,\n    color2\n  } = props;\n  const interpolateHexColors = (color1, color2, steps) => {\n    const c1R = parseInt(color1.slice(1, 3), 16);\n    const c1G = parseInt(color1.slice(3, 5), 16);\n    const c1B = parseInt(color1.slice(5, 7), 16);\n    const c2R = parseInt(color2.slice(1, 3), 16);\n    const c2G = parseInt(color2.slice(3, 5), 16);\n    const c2B = parseInt(color2.slice(5, 7), 16);\n    const diffR = c2R - c1R;\n    const diffG = c2G - c1G;\n    const diffB = c2B - c1B;\n    const interpolatedColors = [];\n    for (let i = 0; i < steps; i++) {\n      if (i === 0) {\n        interpolatedColors.push(color1);\n      }\n      if (i === steps - 1) {\n        interpolatedColors.push(color2);\n      } else {\n        const ratio = i / (steps - 1);\n        const r = Math.round(c1R + ratio * diffR);\n        const g = Math.round(c1G + ratio * diffG);\n        const b = Math.round(c1B + ratio * diffB);\n        interpolatedColors.push(`#${r.toString(16)}${g.toString(16)}${b.toString(16)}`);\n      }\n    }\n    return interpolatedColors;\n  };\n  const colors = interpolateHexColors(color1, color2, 10);\n  return createElement(\"div\", {\n    className: `duo-heatmap ${modifier ? 'duo-heatmap--' + modifier : ''}`\n  }, rows.map((row, index) => createElement(Row, {\n    colorRange: colors,\n    label: row.label,\n    index: index,\n    key: row.label + index\n  }, row.data.map(cell => createElement(Cell, {\n    key: cell.id,\n    item1: cell.item1,\n    item2: cell.item2\n  })))));\n};\nexport { DuoHeatmap };","map":{"version":3,"mappings":";AAeA,MAAMA,GAAG,GAAqBC,KAAK;EACjC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;GAAY,GAAGJ,KAAK;EAEpD,OACEK;IAAKC,SAAS,cAAcH;KAC1BE;IAAKC,SAAS,EAAC;KAAcL,KAAK,CAAO,EACzCI;IAAKC,SAAS,EAAC;KAAaJ,QAAQ,CAAO,EAC3CG,qEAAmC,EACnCA,0CACGD,UAAU,CAACG,GAAG,CAAEC,KAAK,IACpBH;IACEC,SAAS,EAAC,OAAO;IACjBG,GAAG,EAAED,KAAK;IACVE,KAAK,EAAE;MAAEC,eAAe,EAAEH;;IAE7B,CAAC,CACE,CACF;AAEV,CAAC;AChBD,MAAMI,IAAI,GAAqBZ,KAAK;EAClC,MAAM;IAAEa,KAAK;IAAEC;GAAO,GAAGd,KAAK;EAC9B,OACEK;IAAKC,SAAS,EAAC;KACbD;IAAKC,SAAS,EAAC;KACbD;IAAKC,SAAS,EAAC;KACbD;IAAMC,SAAS,EAAC;KAAqBO,KAAK,CAACZ,KAAK,CAAQ,EACxDI;IAAMC,SAAS,EAAC;KAAqBO,KAAK,CAACE,KAAK,CAAQ,CACpD,EAENV;IAAKC,SAAS,EAAC;KACbD;IAAMC,SAAS,EAAC;KAAqBQ,KAAK,CAACb,KAAK,CAAQ,EACxDI;IAAMC,SAAS,EAAC;KAAqBQ,KAAK,CAACC,KAAK,CAAQ,CACpD,CACF,CACF;AAEV,CAAC;MCvBYC,UAAU,GAAqBhB,KAAK;EAC/C,MAAM;IAAEiB,QAAQ;IAAEC,IAAI;IAAEC,MAAM;IAAEC;GAAQ,GAAGpB,KAAK;EAmBhD,MAAMqB,oBAAoB,GAAG,CAC3BF,MAAc,EACdC,MAAc,EACdE,KAAa;IAGb,MAAMC,GAAG,GAAGC,QAAQ,CAACL,MAAM,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAMC,GAAG,GAAGF,QAAQ,CAACL,MAAM,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAME,GAAG,GAAGH,QAAQ,CAACL,MAAM,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAE5C,MAAMG,GAAG,GAAGJ,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAMI,GAAG,GAAGL,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAMK,GAAG,GAAGN,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAG5C,MAAMM,KAAK,GAAGH,GAAG,GAAGL,GAAG;IACvB,MAAMS,KAAK,GAAGH,GAAG,GAAGH,GAAG;IACvB,MAAMO,KAAK,GAAGH,GAAG,GAAGH,GAAG;IAEvB,MAAMO,kBAAkB,GAAG,EAAE;IAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,EAAEa,CAAC,EAAE,EAAE;MAC9B,IAAIA,CAAC,KAAK,CAAC,EAAE;QACXD,kBAAkB,CAACE,IAAI,CAACjB,MAAM,CAAC;;MAEjC,IAAIgB,CAAC,KAAKb,KAAK,GAAG,CAAC,EAAE;QACnBY,kBAAkB,CAACE,IAAI,CAAChB,MAAM,CAAC;OAChC,MAAM;QACL,MAAMiB,KAAK,GAAGF,CAAC,IAAIb,KAAK,GAAG,CAAC,CAAC;QAC7B,MAAMgB,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACjB,GAAG,GAAGc,KAAK,GAAGN,KAAK,CAAC;QACzC,MAAMU,CAAC,GAAGF,IAAI,CAACC,KAAK,CAACd,GAAG,GAAGW,KAAK,GAAGL,KAAK,CAAC;QACzC,MAAMU,CAAC,GAAGH,IAAI,CAACC,KAAK,CAACb,GAAG,GAAGU,KAAK,GAAGJ,KAAK,CAAC;QAEzCC,kBAAkB,CAACE,IAAI,KACjBE,CAAC,CAACK,QAAQ,CAAC,EAAE,IAAIF,CAAC,CAACE,QAAQ,CAAC,EAAE,IAAID,CAAC,CAACC,QAAQ,CAAC,EAAE,GAAG,CACvD;;;IAIL,OAAOT,kBAAkB;GAC1B;EAED,MAAMU,MAAM,GAAGvB,oBAAoB,CAACF,MAAM,EAAEC,MAAM,EAAE,EAAE,CAAC;EAEvD,OACEf;IACEC,SAAS,iBAAiBW,QAAQ,GAAG,eAAe,GAAGA,QAAQ,GAAG;KAEjEC,IAAI,CAACX,GAAG,CAAC,CAACsC,GAAG,EAAE1C,KAAK,KACnBE,cAACN,GAAG;IACFK,UAAU,EAAEwC,MAAM;IAClB3C,KAAK,EAAE4C,GAAG,CAAC5C,KAAK;IAChBE,KAAK,EAAEA,KAAK;IACZM,GAAG,EAAEoC,GAAG,CAAC5C,KAAK,GAAGE;KAEhB0C,GAAG,CAACC,IAAI,CAACvC,GAAG,CAAEwC,IAAI,IACjB1C,cAACO,IAAI;IACHH,GAAG,EAAEsC,IAAI,CAACC,EAAE;IAEZnC,KAAK,EAAEkC,IAAI,CAAClC,KAAK;IACjBC,KAAK,EAAEiC,IAAI,CAACjC;IAEf,CAAC,CAEL,CAAC,CACE;AAEV,CAAC","names":["Row","props","label","children","index","colorRange","React","className","map","color","key","style","backgroundColor","Cell","item1","item2","value","DuoHeatmap","modifier","rows","color1","color2","interpolateHexColors","steps","c1R","parseInt","slice","c1G","c1B","c2R","c2G","c2B","diffR","diffG","diffB","interpolatedColors","i","push","ratio","r","Math","round","g","b","toString","colors","row","data","cell","id"],"sources":["../src/components/row/row-component.tsx","../src/components/cell/cell-component.tsx","../src/index.tsx"],"sourcesContent":["import './row-styles.scss'\nimport React from 'react'\nimport { ICell } from '../cell/cell-component'\n\nexport interface IRow {\n  label: string\n  data: ICell[]\n}\n\ninterface Props {\n  colorRange: string[]\n  label: string\n  index: number\n}\n\nconst Row: React.FC<Props> = (props) => {\n  const { label, children, index, colorRange } = props\n\n  return (\n    <div className={`row row--${index}`}>\n      <div className='row__label'>{label}</div>\n      <div className='row__data'>{children}</div>\n      <div>asdasdasdasdasdasdasdasd</div>\n      <div>\n        {colorRange.map((color) => (\n          <div\n            className='range'\n            key={color}\n            style={{ backgroundColor: color }}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Row\n","import React from 'react'\n\nexport interface Item {\n  label: string\n  value: number\n}\n\nexport interface ICell {\n  id: number\n  item1: Item\n  item2: Item\n}\n\nexport interface Props {\n  item1: Item\n  item2: Item\n}\n\nconst Cell: React.FC<Props> = (props) => {\n  const { item1, item2 } = props\n  return (\n    <div className='cell'>\n      <div className='cell__data'>\n        <div className='cell__item'>\n          <span className='cell__item--label'>{item1.label}</span>\n          <span className='cell__item--value'>{item1.value}</span>\n        </div>\n\n        <div className='cell__item'>\n          <span className='cell__item--label'>{item2.label}</span>\n          <span className='cell__item--value'>{item2.value}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Cell\n","import * as React from 'react'\nimport './styles.module.scss'\nimport Row, { IRow } from './components/row/row-component'\nimport Cell from './components/cell/cell-component'\n\ninterface Props {\n  rows: IRow[]\n  color1: string\n  color2: string\n  modifier?: string\n}\n\nexport const DuoHeatmap: React.FC<Props> = (props) => {\n  const { modifier, rows, color1, color2 } = props\n  // const [highestValue, setHighestValue] = React.useState(0)\n\n  // React.useState(() => {\n  //   let dataHighestValue = 0\n  //   for (let r = 0; r < rows.length; r++) {\n  //     const currentRow = rows[r]\n  //     let rowHighest = 0\n  //     for (let c = 0; c < currentRow.data.length; c++) {\n  //       const currentCellValue =\n  //         currentRow.data[c].item1.value + currentRow.data[c].item2.value / 2\n  //       if (currentCellValue > rowHighest) rowHighest = currentCellValue\n  //     }\n  //     if (rowHighest > dataHighestValue) dataHighestValue = rowHighest\n  //   }\n\n  //   setHighestValue(dataHighestValue)\n  // })\n\n  const interpolateHexColors = (\n    color1: string,\n    color2: string,\n    steps: number\n  ) => {\n    // Parse the hex colors into RGB values\n    const c1R = parseInt(color1.slice(1, 3), 16)\n    const c1G = parseInt(color1.slice(3, 5), 16)\n    const c1B = parseInt(color1.slice(5, 7), 16)\n\n    const c2R = parseInt(color2.slice(1, 3), 16)\n    const c2G = parseInt(color2.slice(3, 5), 16)\n    const c2B = parseInt(color2.slice(5, 7), 16)\n\n    // Calculate the difference between the two colors\n    const diffR = c2R - c1R\n    const diffG = c2G - c1G\n    const diffB = c2B - c1B\n\n    const interpolatedColors = []\n    // Create the interpolated array of colors\n    for (let i = 0; i < steps; i++) {\n      if (i === 0) {\n        interpolatedColors.push(color1)\n      }\n      if (i === steps - 1) {\n        interpolatedColors.push(color2)\n      } else {\n        const ratio = i / (steps - 1)\n        const r = Math.round(c1R + ratio * diffR)\n        const g = Math.round(c1G + ratio * diffG)\n        const b = Math.round(c1B + ratio * diffB)\n\n        interpolatedColors.push(\n          `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`\n        )\n      }\n    }\n\n    return interpolatedColors\n  }\n\n  const colors = interpolateHexColors(color1, color2, 10)\n\n  return (\n    <div\n      className={`duo-heatmap ${modifier ? 'duo-heatmap--' + modifier : ''}`}\n    >\n      {rows.map((row, index) => (\n        <Row\n          colorRange={colors}\n          label={row.label}\n          index={index}\n          key={row.label + index}\n        >\n          {row.data.map((cell) => (\n            <Cell\n              key={cell.id}\n              // color={cell.item1.value + cell.item2.value / 2}\n              item1={cell.item1}\n              item2={cell.item2}\n            />\n          ))}\n        </Row>\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}