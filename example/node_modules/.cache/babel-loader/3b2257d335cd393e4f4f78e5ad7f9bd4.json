{"ast":null,"code":"import React__default, { useState, useEffect, createElement } from 'react';\nconst Row = props => {\n  const {\n    label,\n    children,\n    index\n  } = props;\n  return React__default.createElement(\"div\", {\n    className: `row row--${index}`\n  }, React__default.createElement(\"div\", {\n    className: 'row__label'\n  }, label), React__default.createElement(\"div\", {\n    className: 'row__data'\n  }, children));\n};\nconst Cell = props => {\n  const {\n    item1,\n    item2,\n    colors\n  } = props;\n  const maxValue = item1.value + item2.value;\n  const ratio = 1 - item1.value / maxValue;\n  const colorIndex = ratio < 0.05 ? 0 : Math.round(ratio * 10) - 1;\n  const cellColor = colors[colorIndex];\n  return React__default.createElement(\"div\", {\n    className: 'cell',\n    style: {\n      backgroundColor: `rgba(${cellColor.red}, ${cellColor.green}, ${cellColor.blue}, ${ratio})`\n    }\n  }, React__default.createElement(\"div\", {\n    className: 'cell__data'\n  }, React__default.createElement(\"div\", {\n    className: 'cell__item'\n  }, React__default.createElement(\"span\", {\n    className: 'cell__item-label'\n  }, item1.label), React__default.createElement(\"span\", {\n    className: 'cell__item-value'\n  }, item1.value)), React__default.createElement(\"div\", {\n    className: 'cell__item'\n  }, React__default.createElement(\"span\", {\n    className: 'cell__item-label'\n  }, item2.label), React__default.createElement(\"span\", {\n    className: 'cell__item-value'\n  }, item2.value))));\n};\nconst DuoHeatmap = props => {\n  const {\n    modifier,\n    rows,\n    color1,\n    color2\n  } = props;\n  const [highestValue, setHighestValue] = useState(1);\n  useEffect(() => {\n    let dataHighestValue = 0;\n    for (let r = 0; r < rows.length; r++) {\n      const currentRow = rows[r];\n      let rowHighest = 0;\n      for (let c = 0; c < currentRow.data.length; c++) {\n        const currentCellValue = currentRow.data[c].item1.value + currentRow.data[c].item2.value;\n        if (currentCellValue > rowHighest) rowHighest = currentCellValue;\n      }\n      if (rowHighest > dataHighestValue) dataHighestValue = rowHighest;\n    }\n    setHighestValue(dataHighestValue);\n  }, [highestValue]);\n  const interpolateHexColorsToRGB = (color1, color2, steps) => {\n    const c1R = parseInt(color1.slice(1, 3), 16);\n    const c1G = parseInt(color1.slice(3, 5), 16);\n    const c1B = parseInt(color1.slice(5, 7), 16);\n    const c2R = parseInt(color2.slice(1, 3), 16);\n    const c2G = parseInt(color2.slice(3, 5), 16);\n    const c2B = parseInt(color2.slice(5, 7), 16);\n    const diffR = c2R - c1R;\n    const diffG = c2G - c1G;\n    const diffB = c2B - c1B;\n    const interpolatedColors = [];\n    for (let i = 0; i < steps; i++) {\n      const ratio = i / (steps - 1);\n      const r = Math.round(c1R + ratio * diffR);\n      const g = Math.round(c1G + ratio * diffG);\n      const b = Math.round(c1B + ratio * diffB);\n      interpolatedColors.push({\n        red: r,\n        green: g,\n        blue: b\n      });\n    }\n    return interpolatedColors;\n  };\n  const rgbColors = interpolateHexColorsToRGB(color1, color2, 10);\n  return createElement(\"div\", null, createElement(\"div\", null, \"Highest value: \", highestValue), createElement(\"div\", {\n    className: `duo-heatmap ${modifier ? 'duo-heatmap--' + modifier : ''}`\n  }, rows.map((row, index) => createElement(Row, {\n    label: row.label,\n    index: index,\n    key: row.label + index\n  }, row.data.map(cell => createElement(Cell, {\n    key: cell.id,\n    highestValue: highestValue,\n    colors: rgbColors,\n    item1: cell.item1,\n    item2: cell.item2\n  }))))));\n};\nexport { DuoHeatmap };","map":{"version":3,"mappings":";AAcA,MAAMA,GAAG,GAAqBC,KAAK;EACjC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;GAAO,GAAGH,KAAK;EAExC,OACEI;IAAKC,SAAS,cAAcF;KAC1BC;IAAKC,SAAS,EAAC;KAAcJ,KAAK,CAAO,EACzCG;IAAKC,SAAS,EAAC;KAAaH,QAAQ,CAAO,CACvC;AAEV,CAAC;ACID,MAAMI,IAAI,GAAqBN,KAAK;EAClC,MAAM;IAAEO,KAAK;IAAEC,KAAK;IAAEC;GAAQ,GAAGT,KAAK;EACtC,MAAMU,QAAQ,GAAGH,KAAK,CAACI,KAAK,GAAGH,KAAK,CAACG,KAAK;EAC1C,MAAMC,KAAK,GAAG,CAAC,GAAGL,KAAK,CAACI,KAAK,GAAGD,QAAQ;EACxC,MAAMG,UAAU,GAAGD,KAAK,GAAG,IAAI,GAAG,CAAC,GAAGE,IAAI,CAACC,KAAK,CAACH,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC;EAChE,MAAMI,SAAS,GAAGP,MAAM,CAACI,UAAU,CAAC;EAEpC,OACET;IACEC,SAAS,EAAC,MAAM;IAChBY,KAAK,EAAE;MACLC,eAAe,UAAUF,SAAS,CAACG,QAAQH,SAAS,CAACI,UAAUJ,SAAS,CAACK,SAAST;;KAGpFR;IAAKC,SAAS,EAAC;KACbD;IAAKC,SAAS,EAAC;KACbD;IAAMC,SAAS,EAAC;KAAoBE,KAAK,CAACN,KAAK,CAAQ,EACvDG;IAAMC,SAAS,EAAC;KAAoBE,KAAK,CAACI,KAAK,CAAQ,CACnD,EACNP;IAAKC,SAAS,EAAC;KACbD;IAAMC,SAAS,EAAC;KAAoBG,KAAK,CAACP,KAAK,CAAQ,EACvDG;IAAMC,SAAS,EAAC;KAAoBG,KAAK,CAACG,KAAK,CAAQ,CACnD,CACF,CACF;AAEV,CAAC;MCzCYW,UAAU,GAAqBtB,KAAK;EAC/C,MAAM;IAAEuB,QAAQ;IAAEC,IAAI;IAAEC,MAAM;IAAEC;GAAQ,GAAG1B,KAAK;EAChD,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAc,CAAC,CAAC,CAAC;EAEzDA,SAAe,CAAC;IACd,IAAIyB,gBAAgB,GAAG,CAAC;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAME,UAAU,GAAGR,IAAI,CAACM,CAAC,CAAC;MAC1B,IAAIG,UAAU,GAAG,CAAC;MAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,CAACG,IAAI,CAACJ,MAAM,EAAEG,CAAC,EAAE,EAAE;QAC/C,MAAME,gBAAgB,GACpBJ,UAAU,CAACG,IAAI,CAACD,CAAC,CAAC,CAAC3B,KAAK,CAACI,KAAK,GAAGqB,UAAU,CAACG,IAAI,CAACD,CAAC,CAAC,CAAC1B,KAAK,CAACG,KAAK;QACjE,IAAIyB,gBAAgB,GAAGH,UAAU,EAAEA,UAAU,GAAGG,gBAAgB;;MAElE,IAAIH,UAAU,GAAGJ,gBAAgB,EAAEA,gBAAgB,GAAGI,UAAU;;IAGlEL,eAAe,CAACC,gBAAgB,CAAC;GAClC,EAAE,CAACF,YAAY,CAAC,CAAC;EAuDlB,MAAMU,yBAAyB,GAAG,CAChCZ,MAAc,EACdC,MAAc,EACdY,KAAa;IAGb,MAAMC,GAAG,GAAGC,QAAQ,CAACf,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAMC,GAAG,GAAGF,QAAQ,CAACf,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAME,GAAG,GAAGH,QAAQ,CAACf,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAE5C,MAAMG,GAAG,GAAGJ,QAAQ,CAACd,MAAM,CAACe,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAMI,GAAG,GAAGL,QAAQ,CAACd,MAAM,CAACe,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,MAAMK,GAAG,GAAGN,QAAQ,CAACd,MAAM,CAACe,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAG5C,MAAMM,KAAK,GAAGH,GAAG,GAAGL,GAAG;IACvB,MAAMS,KAAK,GAAGH,GAAG,GAAGH,GAAG;IACvB,MAAMO,KAAK,GAAGH,GAAG,GAAGH,GAAG;IAEvB,MAAMO,kBAAkB,GAAG,EAAE;IAG7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,EAAEa,CAAC,EAAE,EAAE;MAC9B,MAAMvC,KAAK,GAAGuC,CAAC,IAAIb,KAAK,GAAG,CAAC,CAAC;MAC7B,MAAMR,CAAC,GAAGhB,IAAI,CAACC,KAAK,CAACwB,GAAG,GAAG3B,KAAK,GAAGmC,KAAK,CAAC;MACzC,MAAMK,CAAC,GAAGtC,IAAI,CAACC,KAAK,CAAC2B,GAAG,GAAG9B,KAAK,GAAGoC,KAAK,CAAC;MACzC,MAAMK,CAAC,GAAGvC,IAAI,CAACC,KAAK,CAAC4B,GAAG,GAAG/B,KAAK,GAAGqC,KAAK,CAAC;MAEzCC,kBAAkB,CAACI,IAAI,CAAC;QAAEnC,GAAG,EAAEW,CAAC;QAAEV,KAAK,EAAEgC,CAAC;QAAE/B,IAAI,EAAEgC;OAAG,CAAC;;IAGxD,OAAOH,kBAAkB;GAC1B;EAED,MAAMK,SAAS,GAAGlB,yBAAyB,CAACZ,MAAM,EAAEC,MAAM,EAAE,EAAE,CAAC;EAE/D,OACEtB,2BACEA,8CAAqBuB,YAAY,CAAO,EACxCvB;IACEC,SAAS,iBAAiBkB,QAAQ,GAAG,eAAe,GAAGA,QAAQ,GAAG;KAEjEC,IAAI,CAACgC,GAAG,CAAC,CAACC,GAAG,EAAEtD,KAAK,KACnBC,cAACL,GAAG;IAACE,KAAK,EAAEwD,GAAG,CAACxD,KAAK;IAAEE,KAAK,EAAEA,KAAK;IAAEuD,GAAG,EAAED,GAAG,CAACxD,KAAK,GAAGE;KACnDsD,GAAG,CAACtB,IAAI,CAACqB,GAAG,CAAEG,IAAI,IACjBvD,cAACE,IAAI;IACHoD,GAAG,EAAEC,IAAI,CAACC,EAAE;IACZjC,YAAY,EAAEA,YAAY;IAC1BlB,MAAM,EAAE8C,SAAS;IACjBhD,KAAK,EAAEoD,IAAI,CAACpD,KAAK;IACjBC,KAAK,EAAEmD,IAAI,CAACnD;IAEf,CAAC,CAEL,CAAC,CACE,CACF;AAEV,CAAC","names":["Row","props","label","children","index","React","className","Cell","item1","item2","colors","maxValue","value","ratio","colorIndex","Math","round","cellColor","style","backgroundColor","red","green","blue","DuoHeatmap","modifier","rows","color1","color2","highestValue","setHighestValue","dataHighestValue","r","length","currentRow","rowHighest","c","data","currentCellValue","interpolateHexColorsToRGB","steps","c1R","parseInt","slice","c1G","c1B","c2R","c2G","c2B","diffR","diffG","diffB","interpolatedColors","i","g","b","push","rgbColors","map","row","key","cell","id"],"sources":["../src/components/row/row-component.tsx","../src/components/cell/cell-component.tsx","../src/index.tsx"],"sourcesContent":["import './row-styles.scss'\nimport React from 'react'\nimport { ICell } from '../cell/cell-component'\n\nexport interface IRow {\n  label: string\n  data: ICell[]\n}\n\ninterface Props {\n  label: string\n  index: number\n}\n\nconst Row: React.FC<Props> = (props) => {\n  const { label, children, index } = props\n\n  return (\n    <div className={`row row--${index}`}>\n      <div className='row__label'>{label}</div>\n      <div className='row__data'>{children}</div>\n    </div>\n  )\n}\n\nexport default Row\n","import React from 'react'\nimport './cell-styles.scss'\n\nexport interface Item {\n  label: string\n  value: number\n}\n\nexport interface ICell {\n  id: number\n  item1: Item\n  item2: Item\n}\n\nexport interface RGB {\n  red: number\n  green: number\n  blue: number\n}\n\nexport interface Props {\n  colors: RGB[]\n  highestValue: number\n  item1: Item\n  item2: Item\n}\n\nconst Cell: React.FC<Props> = (props) => {\n  const { item1, item2, colors } = props\n  const maxValue = item1.value + item2.value\n  const ratio = 1 - item1.value / maxValue\n  const colorIndex = ratio < 0.05 ? 0 : Math.round(ratio * 10) - 1\n  const cellColor = colors[colorIndex]\n\n  return (\n    <div\n      className='cell'\n      style={{\n        backgroundColor: `rgba(${cellColor.red}, ${cellColor.green}, ${cellColor.blue}, ${ratio})`\n      }}\n    >\n      <div className='cell__data'>\n        <div className='cell__item'>\n          <span className='cell__item-label'>{item1.label}</span>\n          <span className='cell__item-value'>{item1.value}</span>\n        </div>\n        <div className='cell__item'>\n          <span className='cell__item-label'>{item2.label}</span>\n          <span className='cell__item-value'>{item2.value}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Cell\n","import * as React from 'react'\nimport './styles.module.scss'\nimport Row, { IRow } from './components/row/row-component'\nimport Cell from './components/cell/cell-component'\n\ninterface Props {\n  rows: IRow[]\n  color1: string\n  color2: string\n  modifier?: string\n}\n\nexport const DuoHeatmap: React.FC<Props> = (props) => {\n  const { modifier, rows, color1, color2 } = props\n  const [highestValue, setHighestValue] = React.useState(1)\n\n  React.useEffect(() => {\n    let dataHighestValue = 0\n    for (let r = 0; r < rows.length; r++) {\n      const currentRow = rows[r]\n      let rowHighest = 0\n\n      for (let c = 0; c < currentRow.data.length; c++) {\n        const currentCellValue =\n          currentRow.data[c].item1.value + currentRow.data[c].item2.value\n        if (currentCellValue > rowHighest) rowHighest = currentCellValue\n      }\n      if (rowHighest > dataHighestValue) dataHighestValue = rowHighest\n    }\n\n    setHighestValue(dataHighestValue)\n  }, [highestValue])\n\n  // const interpolateHexColors = (\n  //   color1: string,\n  //   color2: string,\n  //   steps: number\n  // ) => {\n  //   // Parse the hex colors into RGB values\n  //   const c1R = parseInt(color1.slice(1, 3), 16)\n  //   const c1G = parseInt(color1.slice(3, 5), 16)\n  //   const c1B = parseInt(color1.slice(5, 7), 16)\n\n  //   const c2R = parseInt(color2.slice(1, 3), 16)\n  //   const c2G = parseInt(color2.slice(3, 5), 16)\n  //   const c2B = parseInt(color2.slice(5, 7), 16)\n\n  //   // Calculate the difference between the two colors\n  //   const diffR = c2R - c1R\n  //   const diffG = c2G - c1G\n  //   const diffB = c2B - c1B\n\n  //   const interpolatedColors = []\n  //   // Create the interpolated array of colors\n  //   for (let i = 0; i < steps; i++) {\n  //     if (i === 0) {\n  //       interpolatedColors.push(color1)\n  //     } else if (i === steps - 1) {\n  //       interpolatedColors.push(color2)\n  //     } else {\n  //       const ratio = i / (steps - 1)\n  //       const r = Math.round(c1R + ratio * diffR)\n  //       const g = Math.round(c1G + ratio * diffG)\n  //       const b = Math.round(c1B + ratio * diffB)\n\n  //       let rHex = r.toString(16)\n  //       let gHex = g.toString(16)\n  //       let bHex = b.toString(16)\n\n  //       if (rHex.length === 1) {\n  //         rHex = '0' + rHex\n  //       }\n  //       if (gHex.length === 1) {\n  //         gHex = '0' + gHex\n  //       }\n  //       if (bHex.length === 1) {\n  //         bHex = '0' + bHex\n  //       }\n\n  //       interpolatedColors.push(`#${rHex}${gHex}${bHex}`)\n  //     }\n  //   }\n\n  //   return interpolatedColors\n  // }\n\n  const interpolateHexColorsToRGB = (\n    color1: string,\n    color2: string,\n    steps: number\n  ) => {\n    // Parse the hex colors into RGB values\n    const c1R = parseInt(color1.slice(1, 3), 16)\n    const c1G = parseInt(color1.slice(3, 5), 16)\n    const c1B = parseInt(color1.slice(5, 7), 16)\n\n    const c2R = parseInt(color2.slice(1, 3), 16)\n    const c2G = parseInt(color2.slice(3, 5), 16)\n    const c2B = parseInt(color2.slice(5, 7), 16)\n\n    // Calculate the difference between the two colors\n    const diffR = c2R - c1R\n    const diffG = c2G - c1G\n    const diffB = c2B - c1B\n\n    const interpolatedColors = []\n\n    // Create the interpolated array of colors\n    for (let i = 0; i < steps; i++) {\n      const ratio = i / (steps - 1)\n      const r = Math.round(c1R + ratio * diffR)\n      const g = Math.round(c1G + ratio * diffG)\n      const b = Math.round(c1B + ratio * diffB)\n\n      interpolatedColors.push({ red: r, green: g, blue: b })\n    }\n\n    return interpolatedColors\n  }\n\n  const rgbColors = interpolateHexColorsToRGB(color1, color2, 10)\n\n  return (\n    <div>\n      <div>Highest value: {highestValue}</div>\n      <div\n        className={`duo-heatmap ${modifier ? 'duo-heatmap--' + modifier : ''}`}\n      >\n        {rows.map((row, index) => (\n          <Row label={row.label} index={index} key={row.label + index}>\n            {row.data.map((cell) => (\n              <Cell\n                key={cell.id}\n                highestValue={highestValue}\n                colors={rgbColors}\n                item1={cell.item1}\n                item2={cell.item2}\n              />\n            ))}\n          </Row>\n        ))}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}