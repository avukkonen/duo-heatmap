{"ast":null,"code":"import React__default, { useState, useEffect, createElement } from 'react';\nconst Row = props => {\n  const {\n    label,\n    children,\n    index\n  } = props;\n  return React__default.createElement(\"div\", {\n    className: `row row--${index}`\n  }, React__default.createElement(\"div\", {\n    className: 'row__label'\n  }, label), React__default.createElement(\"div\", {\n    className: 'row__data'\n  }, children));\n};\nconst Cell = props => {\n  const {\n    item1,\n    item2,\n    colors,\n    highestValue\n  } = props;\n  const stepAmount = colors.length;\n  const cellMaxValue = item1.value + item2.value;\n  const ratio = 1 - item1.value / cellMaxValue;\n  let colorIndex = Math.round(ratio * stepAmount) - 1;\n  if (colorIndex < 0) {\n    colorIndex = 0;\n  }\n  const alpha = highestValue / cellMaxValue;\n  const cellColor = colors[colorIndex];\n  return React__default.createElement(\"div\", {\n    className: 'cell',\n    style: {\n      backgroundColor: `rgba(${cellColor.red}, ${cellColor.green}, ${cellColor.blue}, ${alpha})`\n    }\n  }, React__default.createElement(\"div\", {\n    className: 'cell__data'\n  }, React__default.createElement(\"div\", {\n    className: 'cell__item'\n  }, React__default.createElement(\"span\", {\n    className: 'cell__item-label'\n  }, item1.label), React__default.createElement(\"span\", {\n    className: 'cell__item-value'\n  }, item1.value)), React__default.createElement(\"div\", {\n    className: 'cell__item'\n  }, React__default.createElement(\"span\", {\n    className: 'cell__item-label'\n  }, item2.label), React__default.createElement(\"span\", {\n    className: 'cell__item-value'\n  }, item2.value))));\n};\nconst DuoHeatmap = props => {\n  const {\n    modifier,\n    rows,\n    color1,\n    color2,\n    steps\n  } = props;\n  const [highestValue, setHighestValue] = useState(1);\n  const stepValue = steps || 10;\n  useEffect(() => {\n    let dataHighestValue = 0;\n    for (let r = 0; r < rows.length; r++) {\n      const currentRow = rows[r];\n      let rowHighest = 0;\n      for (let c = 0; c < currentRow.data.length; c++) {\n        const currentCellValue = currentRow.data[c].item1.value + currentRow.data[c].item2.value;\n        if (currentCellValue > rowHighest) rowHighest = currentCellValue;\n      }\n      if (rowHighest > dataHighestValue) dataHighestValue = rowHighest;\n    }\n    setHighestValue(dataHighestValue);\n  }, [highestValue]);\n  const interpolateHexColorsToRGB = (color1, color2, steps) => {\n    const c1R = parseInt(color1.slice(1, 3), 16);\n    const c1G = parseInt(color1.slice(3, 5), 16);\n    const c1B = parseInt(color1.slice(5, 7), 16);\n    const c2R = parseInt(color2.slice(1, 3), 16);\n    const c2G = parseInt(color2.slice(3, 5), 16);\n    const c2B = parseInt(color2.slice(5, 7), 16);\n    const diffR = c2R - c1R;\n    const diffG = c2G - c1G;\n    const diffB = c2B - c1B;\n    const interpolatedColors = [];\n    for (let i = 0; i < steps; i++) {\n      const ratio = i / (steps - 1);\n      const r = Math.round(c1R + ratio * diffR);\n      const g = Math.round(c1G + ratio * diffG);\n      const b = Math.round(c1B + ratio * diffB);\n      interpolatedColors.push({\n        red: r,\n        green: g,\n        blue: b\n      });\n    }\n    return interpolatedColors;\n  };\n  const rgbColors = interpolateHexColorsToRGB(color1, color2, stepValue);\n  return createElement(\"div\", null, createElement(\"div\", null, \"Highest value: \", highestValue), createElement(\"div\", {\n    className: `duo-heatmap ${modifier ? 'duo-heatmap--' + modifier : ''}`\n  }, rows.map((row, index) => createElement(Row, {\n    label: row.label,\n    index: index,\n    key: row.label + index\n  }, row.data.map(cell => createElement(Cell, {\n    key: cell.id,\n    highestValue: highestValue,\n    colors: rgbColors,\n    item1: cell.item1,\n    item2: cell.item2\n  }))))));\n};\nexport { DuoHeatmap };","map":{"version":3,"mappings":"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","names":["Row","props","label","children","index","React","className","Cell","item1","item2","colors","highestValue","stepAmount","length","cellMaxValue","value","ratio","colorIndex","Math","round","alpha","cellColor","style","backgroundColor","red","green","blue","DuoHeatmap","modifier","rows","color1","color2","steps","setHighestValue","stepValue","dataHighestValue","r","currentRow","rowHighest","c","data","currentCellValue","interpolateHexColorsToRGB","c1R","parseInt","slice","c1G","c1B","c2R","c2G","c2B","diffR","diffG","diffB","interpolatedColors","i","g","b","push","rgbColors","map","row","key","cell","id"],"sources":["../src/components/row/row-component.tsx","../src/components/cell/cell-component.tsx","../src/index.tsx"],"sourcesContent":["import './row-styles.scss'\nimport React from 'react'\nimport { ICell } from '../cell/cell-component'\n\nexport interface IRow {\n  label: string\n  data: ICell[]\n}\n\ninterface Props {\n  label: string\n  index: number\n}\n\nconst Row: React.FC<Props> = (props) => {\n  const { label, children, index } = props\n\n  return (\n    <div className={`row row--${index}`}>\n      <div className='row__label'>{label}</div>\n      <div className='row__data'>{children}</div>\n    </div>\n  )\n}\n\nexport default Row\n","import React from 'react'\n\nexport interface Item {\n  label: string\n  value: number\n}\n\nexport interface ICell {\n  id: number\n  item1: Item\n  item2: Item\n}\n\nexport interface RGB {\n  red: number\n  green: number\n  blue: number\n}\n\nexport interface Props {\n  colors: RGB[]\n  highestValue: number\n  item1: Item\n  item2: Item\n}\n\nconst Cell: React.FC<Props> = (props) => {\n  const { item1, item2, colors, highestValue } = props\n  const stepAmount = colors.length\n\n  //  maximum value of the items values\n  const cellMaxValue = item1.value + item2.value\n\n  // ratio of the two values inverted\n  const ratio = 1 - item1.value / cellMaxValue\n\n  // calculated index of the color lerp\n  let colorIndex = Math.round(ratio * stepAmount) - 1\n\n  // sometimes the index is -1 and then it must be 0 or there will be pain\n  if (colorIndex < 0) {\n    colorIndex = 0\n  }\n  // alpha value of the total highest value of the given range\n  const alpha = highestValue / cellMaxValue\n  const cellColor = colors[colorIndex]\n\n  return (\n    <div\n      className='cell'\n      style={{\n        backgroundColor: `rgba(${cellColor.red}, ${cellColor.green}, ${cellColor.blue}, ${alpha})`\n      }}\n    >\n      <div className='cell__data'>\n        <div className='cell__item'>\n          <span className='cell__item-label'>{item1.label}</span>\n          <span className='cell__item-value'>{item1.value}</span>\n        </div>\n        <div className='cell__item'>\n          <span className='cell__item-label'>{item2.label}</span>\n          <span className='cell__item-value'>{item2.value}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Cell\n","import * as React from 'react'\nimport './styles.module.scss'\nimport Row, { IRow } from './components/row/row-component'\nimport Cell from './components/cell/cell-component'\n\ninterface DuoHeatmapProps {\n  rows: IRow[]\n  color1: string\n  color2: string\n  steps?: number\n  modifier?: string\n}\n\nexport const DuoHeatmap: React.FC<DuoHeatmapProps> = (props) => {\n  const { modifier, rows, color1, color2, steps } = props\n  const [highestValue, setHighestValue] = React.useState(1)\n  const stepValue = steps || 10\n\n  React.useEffect(() => {\n    let dataHighestValue = 0\n    for (let r = 0; r < rows.length; r++) {\n      const currentRow = rows[r]\n      let rowHighest = 0\n\n      for (let c = 0; c < currentRow.data.length; c++) {\n        const currentCellValue =\n          currentRow.data[c].item1.value + currentRow.data[c].item2.value\n        if (currentCellValue > rowHighest) rowHighest = currentCellValue\n      }\n      if (rowHighest > dataHighestValue) dataHighestValue = rowHighest\n    }\n\n    setHighestValue(dataHighestValue)\n  }, [highestValue])\n\n  /**\n   * Turns two hex colors to a lerp of rgb values\n   * @param color1 first color in hex\n   * @param color2 second color in hex\n   * @param steps amount of steps\n   * @returns\n   */\n  const interpolateHexColorsToRGB = (\n    color1: string,\n    color2: string,\n    steps: number\n  ) => {\n    // Parse the hex colors into RGB values\n    const c1R = parseInt(color1.slice(1, 3), 16)\n    const c1G = parseInt(color1.slice(3, 5), 16)\n    const c1B = parseInt(color1.slice(5, 7), 16)\n\n    const c2R = parseInt(color2.slice(1, 3), 16)\n    const c2G = parseInt(color2.slice(3, 5), 16)\n    const c2B = parseInt(color2.slice(5, 7), 16)\n\n    // Calculate the difference between the two colors\n    const diffR = c2R - c1R\n    const diffG = c2G - c1G\n    const diffB = c2B - c1B\n\n    const interpolatedColors = []\n\n    // Create the interpolated array of colors\n    for (let i = 0; i < steps; i++) {\n      const ratio = i / (steps - 1)\n      const r = Math.round(c1R + ratio * diffR)\n      const g = Math.round(c1G + ratio * diffG)\n      const b = Math.round(c1B + ratio * diffB)\n\n      interpolatedColors.push({ red: r, green: g, blue: b })\n    }\n\n    return interpolatedColors\n  }\n\n  const rgbColors = interpolateHexColorsToRGB(color1, color2, stepValue)\n\n  return (\n    <div>\n      <div>Highest value: {highestValue}</div>\n      <div\n        className={`duo-heatmap ${modifier ? 'duo-heatmap--' + modifier : ''}`}\n      >\n        {rows.map((row, index) => (\n          <Row label={row.label} index={index} key={row.label + index}>\n            {row.data.map((cell) => (\n              <Cell\n                key={cell.id}\n                highestValue={highestValue}\n                colors={rgbColors}\n                item1={cell.item1}\n                item2={cell.item2}\n              />\n            ))}\n          </Row>\n        ))}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}