{"ast":null,"code":"import React__default, { useState, useEffect, createElement } from 'react';\nvar styles = {\n  \"row\": \"_1EzKq\",\n  \"rowLabel\": \"_1D2H3\",\n  \"rowData\": \"_2xyGV\"\n};\nvar Row = function Row(props) {\n  var label = props.label,\n    children = props.children;\n  return React__default.createElement(\"div\", {\n    \"data-testid\": 'row',\n    className: styles.row\n  }, label ? React__default.createElement(\"div\", {\n    \"data-testid\": 'label',\n    className: styles.rowLabel\n  }, label) : null, React__default.createElement(\"div\", {\n    \"data-testid\": 'row-data',\n    className: styles.rowData\n  }, children));\n};\nvar styles$1 = {\n  \"cell\": \"_fxmnj\",\n  \"cellData\": \"_3egf4\",\n  \"cellItem\": \"_36YU9\",\n  \"cellItemLabel\": \"_ApSI-\",\n  \"cellItemValue\": \"_3vYDg\"\n};\nvar Cell = function Cell(props) {\n  var item1 = props.item1,\n    item2 = props.item2,\n    colors = props.colors,\n    highestValue = props.highestValue;\n  var stepAmount = colors.length;\n  var value1 = item1.value || 0;\n  var value2 = item2.value || 0;\n  var cellMaxValue = value1 + value2;\n  var ratio = 1 - value1 / cellMaxValue;\n  var colorIndex = Math.round(ratio * stepAmount) - 1;\n  if (colorIndex < 0) {\n    colorIndex = 0;\n  }\n  var alpha = 1 / (highestValue / cellMaxValue);\n  var cellColor = cellMaxValue ? colors[colorIndex] : {\n    red: 255,\n    green: 255,\n    blue: 255\n  };\n  return React__default.createElement(\"div\", {\n    \"data-testid\": 'cell',\n    className: styles$1.cell,\n    style: {\n      backgroundColor: \"rgba(\" + cellColor.red + \", \" + cellColor.green + \", \" + cellColor.blue + \", \" + (cellMaxValue ? alpha : 1) + \")\"\n    }\n  }, cellMaxValue ? React__default.createElement(\"div\", {\n    role: 'tooltip',\n    \"data-testid\": 'tooltip',\n    className: styles$1.cellData\n  }, React__default.createElement(\"div\", {\n    className: styles$1.cellItem\n  }, React__default.createElement(\"span\", {\n    className: styles$1.cellItemLabel\n  }, item1.label), React__default.createElement(\"span\", {\n    className: styles$1.cellItemValue\n  }, value1)), React__default.createElement(\"div\", {\n    className: styles$1.cellItem\n  }, React__default.createElement(\"span\", {\n    className: styles$1.cellItemLabel\n  }, item2.label), React__default.createElement(\"span\", {\n    className: styles$1.cellItemValue\n  }, value2))) : null);\n};\nvar DuoHeatmap = function DuoHeatmap(props) {\n  var modifier = props.modifier,\n    rows = props.rows,\n    color1 = props.color1,\n    color2 = props.color2,\n    steps = props.steps;\n  var _React$useState = useState(-1),\n    highestValue = _React$useState[0],\n    setHighestValue = _React$useState[1];\n  var stepsAmount = steps || 10;\n  var firstColor = color1 || '#ffffff';\n  var secondColor = color2 || '000000';\n  useEffect(function () {\n    var dataHighestValue = 0;\n    for (var r = 0; r < rows.length; r++) {\n      var currentRow = rows[r];\n      var rowHighest = 0;\n      for (var c = 0; c < currentRow.data.length; c++) {\n        var value1 = currentRow.data[c].item1.value ? currentRow.data[c].item1.value : 0;\n        var value2 = currentRow.data[c].item2.value ? currentRow.data[c].item2.value : 0;\n        var currentCellValue = value1 + value2;\n        if (currentCellValue > rowHighest) rowHighest = currentCellValue;\n      }\n      if (rowHighest > dataHighestValue) dataHighestValue = rowHighest;\n    }\n    setHighestValue(dataHighestValue);\n  }, [highestValue]);\n  var interpolateHexColorsToRGB = function interpolateHexColorsToRGB(color1, color2, steps) {\n    var c1R = parseInt(color1.slice(1, 3), 16);\n    var c1G = parseInt(color1.slice(3, 5), 16);\n    var c1B = parseInt(color1.slice(5, 7), 16);\n    var c2R = parseInt(color2.slice(1, 3), 16);\n    var c2G = parseInt(color2.slice(3, 5), 16);\n    var c2B = parseInt(color2.slice(5, 7), 16);\n    var diffR = c2R - c1R;\n    var diffG = c2G - c1G;\n    var diffB = c2B - c1B;\n    var interpolatedColors = [];\n    for (var i = 0; i < steps; i++) {\n      var ratio = i / (steps - 1);\n      var r = Math.round(c1R + ratio * diffR);\n      var g = Math.round(c1G + ratio * diffG);\n      var b = Math.round(c1B + ratio * diffB);\n      interpolatedColors.push({\n        red: r,\n        green: g,\n        blue: b\n      });\n    }\n    return interpolatedColors;\n  };\n  var rgbColors = interpolateHexColorsToRGB(firstColor, secondColor, stepsAmount);\n  return createElement(\"div\", {\n    \"data-testid\": 'duo-heatmap',\n    className: \"duo-heatmap \" + (modifier ? 'duo-heatmap--' + modifier : '')\n  }, rows.map(function (row, index) {\n    return createElement(Row, {\n      label: row.label,\n      key: 'row-' + index\n    }, highestValue === -1 ? null : row.data.map(function (cell) {\n      return createElement(Cell, {\n        \"data-testid\": 'cell',\n        key: cell.id,\n        highestValue: highestValue,\n        colors: rgbColors,\n        item1: cell.item1,\n        item2: cell.item2\n      });\n    }));\n  }));\n};\nexport default DuoHeatmap;","map":{"version":3,"mappings":"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","names":["Row","props","label","children","React","className","styles","row","rowLabel","rowData","Cell","item1","item2","colors","highestValue","stepAmount","length","value1","value","value2","cellMaxValue","ratio","colorIndex","Math","round","alpha","cellColor","red","green","blue","cell","style","backgroundColor","role","cellData","cellItem","cellItemLabel","cellItemValue","DuoHeatmap","modifier","rows","color1","color2","steps","setHighestValue","stepsAmount","firstColor","secondColor","dataHighestValue","r","currentRow","rowHighest","c","data","currentCellValue","interpolateHexColorsToRGB","c1R","parseInt","slice","c1G","c1B","c2R","c2G","c2B","diffR","diffG","diffB","interpolatedColors","i","g","b","push","rgbColors","map","index","key","id"],"sources":["../src/components/row/row-component.tsx","../src/components/cell/cell-component.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react'\nimport styles from './row.module.scss'\n\ninterface RowProps {\n  label?: string\n}\n\nconst Row: React.FC<RowProps> = (props) => {\n  const { label, children } = props\n  return (\n    <div data-testid='row' className={styles.row}>\n      {label ? (\n        <div data-testid='label' className={styles.rowLabel}>\n          {label}\n        </div>\n      ) : null}\n      <div data-testid='row-data' className={styles.rowData}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Row\n","import React from 'react'\nimport styles from './cell.module.scss'\n\nexport interface Item {\n  label: string\n  value: number | undefined | null\n}\n\nexport interface RGB {\n  red: number\n  green: number\n  blue: number\n}\n\nexport interface Props {\n  colors: RGB[]\n  highestValue: number\n  item1: Item\n  item2: Item\n}\n\nconst Cell: React.FC<Props> = (props) => {\n  const { item1, item2, colors, highestValue } = props\n  const stepAmount = colors.length\n\n  // values can be null or undefined\n  const value1 = item1.value || 0\n  const value2 = item2.value || 0\n\n  //  maximum value of the items values\n  const cellMaxValue = value1 + value2\n\n  // ratio of the first value inverted\n  const ratio = 1 - value1 / cellMaxValue\n\n  // calculated index of the color lerp\n  let colorIndex = Math.round(ratio * stepAmount) - 1\n\n  // sometimes the index is -1 and then it must be 0 or there will be pain\n  if (colorIndex < 0) {\n    colorIndex = 0\n  }\n\n  // alpha value of the total highest value of the given range\n  const alpha = 1 / (highestValue / cellMaxValue)\n  const cellColor = cellMaxValue\n    ? colors[colorIndex]\n    : { red: 255, green: 255, blue: 255 }\n\n  return (\n    <div\n      data-testid='cell'\n      className={styles.cell}\n      style={{\n        backgroundColor: `rgba(${cellColor.red}, ${cellColor.green}, ${\n          cellColor.blue\n        }, ${cellMaxValue ? alpha : 1})`\n      }}\n    >\n      {cellMaxValue ? (\n        <div role='tooltip' data-testid='tooltip' className={styles.cellData}>\n          <div className={styles.cellItem}>\n            <span className={styles.cellItemLabel}>{item1.label}</span>\n            <span className={styles.cellItemValue}>{value1}</span>\n          </div>\n          <div className={styles.cellItem}>\n            <span className={styles.cellItemLabel}>{item2.label}</span>\n            <span className={styles.cellItemValue}>{value2}</span>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Cell\n","import * as React from 'react'\nimport Row from './components/row/row-component'\nimport Cell, { Item } from './components/cell/cell-component'\n\ninterface DuoHeatmapProps {\n  rows: IRow[]\n  color1?: string\n  color2?: string\n  steps?: number\n  modifier?: string\n}\n\nexport interface IRow {\n  label?: string\n  data: ICell[]\n}\n\nexport interface ICell {\n  id: number\n  item1: Item\n  item2: Item\n}\nconst DuoHeatmap: React.FC<DuoHeatmapProps> = (props) => {\n  const { modifier, rows, color1, color2, steps } = props\n  const [highestValue, setHighestValue] = React.useState(-1)\n  const stepsAmount = steps || 10\n  const firstColor = color1 || '#ffffff'\n  const secondColor = color2 || '000000'\n\n  React.useEffect(() => {\n    let dataHighestValue = 0\n    for (let r = 0; r < rows.length; r++) {\n      const currentRow = rows[r]\n      let rowHighest = 0\n\n      for (let c = 0; c < currentRow.data.length; c++) {\n        const value1 = currentRow.data[c].item1.value\n          ? (currentRow.data[c].item1.value as number)\n          : 0\n        const value2 = currentRow.data[c].item2.value\n          ? (currentRow.data[c].item2.value as number)\n          : 0\n\n        const currentCellValue = value1 + value2\n        if (currentCellValue > rowHighest) rowHighest = currentCellValue\n      }\n      if (rowHighest > dataHighestValue) dataHighestValue = rowHighest\n    }\n\n    setHighestValue(dataHighestValue)\n  }, [highestValue])\n\n  /**\n   * Turns two hex colors to a lerp of rgb values\n   * @param color1 first color in hex\n   * @param color2 second color in hex\n   * @param steps amount of steps\n   * @returns an array of objects containing rgb values\n   */\n  const interpolateHexColorsToRGB = (\n    color1: string,\n    color2: string,\n    steps: number\n  ) => {\n    // Parse the hex colors into RGB values\n    const c1R = parseInt(color1.slice(1, 3), 16)\n    const c1G = parseInt(color1.slice(3, 5), 16)\n    const c1B = parseInt(color1.slice(5, 7), 16)\n\n    const c2R = parseInt(color2.slice(1, 3), 16)\n    const c2G = parseInt(color2.slice(3, 5), 16)\n    const c2B = parseInt(color2.slice(5, 7), 16)\n\n    // Calculate the difference between the two colors\n    const diffR = c2R - c1R\n    const diffG = c2G - c1G\n    const diffB = c2B - c1B\n\n    const interpolatedColors = []\n\n    // Create the interpolated array of colors\n    for (let i = 0; i < steps; i++) {\n      const ratio = i / (steps - 1)\n      const r = Math.round(c1R + ratio * diffR)\n      const g = Math.round(c1G + ratio * diffG)\n      const b = Math.round(c1B + ratio * diffB)\n\n      interpolatedColors.push({ red: r, green: g, blue: b })\n    }\n\n    return interpolatedColors\n  }\n\n  const rgbColors = interpolateHexColorsToRGB(\n    firstColor,\n    secondColor,\n    stepsAmount\n  )\n\n  return (\n    <div\n      data-testid='duo-heatmap'\n      className={`duo-heatmap ${modifier ? 'duo-heatmap--' + modifier : ''}`}\n    >\n      {rows.map((row, index) => (\n        <Row label={row.label} key={'row-' + index}>\n          {highestValue === -1\n            ? null\n            : row.data.map((cell) => (\n                <Cell\n                  data-testid='cell'\n                  key={cell.id}\n                  highestValue={highestValue}\n                  colors={rgbColors}\n                  item1={cell.item1}\n                  item2={cell.item2}\n                />\n              ))}\n        </Row>\n      ))}\n    </div>\n  )\n}\n\nexport default DuoHeatmap\n"]},"metadata":{},"sourceType":"module"}